# -*- coding: utf-8 -*-
"""Flight Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BZEnnGd22-OHcwkGYsSeNdkGKB4gNBIJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel("/content/Data_Train.xlsx")
df.head()

df.info()

df.shape

df.dropna(inplace=True)

df.isna().sum()

df['journey_day'] = pd.to_datetime(df['Date_of_Journey'], format = "%d/%m/%Y").dt.day
df['journey_month'] = pd.to_datetime(df['Date_of_Journey'], format = "%d/%m/%Y").dt.month
df.head()

df.drop('Date_of_Journey', axis=1, inplace=True)
df.head()

df['dep_hour'] = pd.to_datetime(df['Dep_Time']).dt.hour
df['dep_min'] = pd.to_datetime(df['Dep_Time']).dt.minute
df.head()

df.drop('Dep_Time', axis=1, inplace=True)
df.head()

df['arrival_hour'] = pd.to_datetime(df['Arrival_Time']).dt.hour
 df['arrival_min'] = pd.to_datetime(df['Arrival_Time']).dt.minute
df.head()

df.drop('Arrival_Time', axis=1, inplace=True)
df.head()

duration = list(df['Duration'])

for i in range(len(duration)):
  if len(duration[i].split()) != 2:
    if "h" in duration[i]:
      duration[i] = duration[i] + " 0m"
    else:
      duration[i] = "0h " + duration[i]

duration_hour = []
duration_min = []

for i in range(len(duration)):
  duration_hour.append(int(duration[i].split(sep='h')[0]))
  duration_min.append(int(duration[i].split(sep='m')[0].split()[-1]))


df['duration_hour'] = duration_hour
df['duration_min'] = duration_min

df.head()

df.drop('Duration', axis=1, inplace=True)
df.head()

df['Airline'].value_counts()

plt.figure(figsize=(20,8))
sns.boxplot(x='Airline', y='Price', data=df)
plt.show()

airline = df[['Airline']]
airline = pd.get_dummies(airline, drop_first=True)
airline.head()

df['Source'].value_counts()

plt.figure(figsize=(20,8))
sns.boxplot(x='Source', y='Price', data=df)
plt.show()

source = df[['Source']]
source = pd.get_dummies(source, drop_first=True)
source.head()

df["Destination"].value_counts()

plt.figure(figsize=(20,8))
sns.boxplot(x='Destination', y='Price', data=df)
plt.show()

destination = df[['Destination']]
destination = pd.get_dummies(destination, drop_first=True)
destination.head()

df.drop(["Route", "Additional_Info"], axis = 1, inplace = True)

df.head()

df["Total_Stops"].value_counts()

df.replace({"non-stop": 0, "1 stop": 1, "2 stops": 2, "3 stops": 3, "4 stops": 4}, inplace = True)
df.head()

train_df = pd.concat([df, airline, source, destination], axis=1)
train_df.head()

train_df.drop(['Airline', 'Source', 'Destination'], axis=1, inplace=True)
train_df.head()

x = train_df.drop('Price', axis=1)
y = train_df['Price']
x[:5], y[:5]

from sklearn.model_selection import train_test_split
x_train, x_test, y_tarin, y_test = train_test_split(x, y, test_size=0.25, random_state=42)
x_train.shape, x_test.shape

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(x_train, y_tarin)

rf.score(x_train, y_tarin)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

y_pred = rf.predict(x_test)

def evaluate(ytest, ypred):
  print('MAE : ', mean_absolute_error(ytest, ypred))
  print('MSE :', mean_squared_error(ytest, ypred))
  print('RMSE :', np.sqrt(mean_squared_error(ytest, ypred)))
  
evaluate(y_test, y_pred)

import pickle

with open('flight_price_prediction_model.pkl', 'wb') as f:
  pickle.dump(rf, f)

with open('/content/flight_price_prediction_model.pkl', 'rb') as f:
  model = pickle.load(f)

model.score(x_test, y_test)

